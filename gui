-- Viewer GUI API
-- Used for drawing the GUI

function logfile(input)
    if not fs.exists("/logs") then
        fs.makeDir("/logs")
    else
        local file = fs.open("/logs/viewer.log", "a")
        file.write("[GUI]  "..input.."\n")
        file.close()
    end
end

function clearScreen()
    -- Clear the current screen, wiping for complete redraw
    gui.logfile("Unloading old settings in preparation for screen refresh...")
    os.unloadAPI("settings")
    os.loadAPI("settings")
    gui.logfile("Settings reloaded!")
    term.setBackgroundColor(settings.gui.backgroundColor)
    term.clear()
end

local function drawMenuBar()
    -- Draw main title/info bar
    local termX, termY = term.getSize()
    term.setCursorPos(1, settings.gui.menuLocation == "top" and termY or 1)
    term.setBackgroundColor(settings.gui.infoBarColor)
    term.setTextColor(settings.gui.infoTextColor)
    for i = 1, termX do
        term.setCursorPos(i, settings.gui.menuLocation == "top" and termY or 1)
        write(" ")
    end
    term.setCursorPos(1, settings.gui.menuLocation == "top" and termY or 1)
    write("Viewer v"..settings.main.version)
    term.setCursorPos(termX, 1)
    write("X")
    -- Draw menu bar
    term.setCursorPos(1, settings.gui.menuLocation == "top" and 1 or termY)
    term.setBackgroundColor(settings.gui.menuBarColor)
    for i = 1, termX do
        term.setCursorPos(i, settings.gui.menuLocation == "top" and 1 or termY)
        write(" ")
    end
end

function drawList(list, num)
    local termX, termY = term.getSize()
    for i = 3, termY - 1 do
        term.setTextColor(settings.gui.textColor)
        term.setBackgroundColor(settings.gui.backgroundColor)
        term.setCursorPos(1, i)
        write(string.rep(" ", 15))
    end
    term.setCursorPos(1, 2)
    term.setTextColor(settings.gui.textColor)
    term.setBackgroundColor(settings.gui.backgroundColor)
    write("Peripherals    Information")
    term.setTextColor(settings.gui.tuiColor)
    term.setCursorPos(15, 2)
    write("|")
    write(string.rep("-", 51))
    for i = 2, termY - 1 do 
        term.setCursorPos(15, i)
        if i == 2 then
            term.setBackgroundColor(settings.gui.backgroundColor)
            term.setTextColor(settings.gui.tuiColor)
            write("|")
        elseif i == 3 then
            term.setBackgroundColor(settings.gui.backgroundColor)
            term.setTextColor(settings.gui.tuiColor)
            write("+")
        elseif i == 4 then
            term.setBackgroundColor(settings.gui.scrollbarColor)
            term.setTextColor(settings.gui.scrollbarTextColor)
            write("^")
        elseif i == termY - 1 then
            term.setBackgroundColor(settings.gui.scrollbarColor)
            term.setTextColor(settings.gui.scrollbarTextColor)
            write("v")
        else
            term.setBackgroundColor(settings.gui.scrollbarColor)
            term.setTextColor(settings.gui.scrollbarTextColor)
            write("|")
        end
    end
    term.setBackgroundColor(settings.gui.menuBarColor)
    term.setTextColor(settings.gui.menuTextColor)
    term.setCursorPos(6, settings.gui.menuLocation == "top" and 1 or termY)
    write(string.rep(" ", 9))
    term.setCursorPos(1, settings.gui.menuLocation == "top" and 1 or termY)
    write("Page "..math.ceil(num / 15).."/"..math.ceil(#list / 15))
    for i = 1, 15 do
        if #list < 15 then
            term.setTextColor(settings.gui.textColor)
            term.setBackgroundColor(settings.gui.backgroundColor)
            term.setCursorPos(1, i + 3)
            if string.len((list[i] and list[i].label) and list[i].label or "") > 11 then
                write(list[i] and string.sub(list[i].label, 1, 11).."..." or "")
            else
                write(list[i] and list[i].label or "")
            end
            term.setBackgroundColor(settings.gui.highlightBackgroundColor)
            term.setTextColor(settings.gui.highlightTextColor)
            term.setCursorPos(1, num + 3)
            if string.len(list[num].label) > 11 then
                write(string.sub(list[num].label, 1, 11).."...")
            else
                write(list[num].label)
            end
         else
            if num > 15 then
                term.setTextColor(settings.gui.textColor)
                term.setBackgroundColor(settings.gui.backgroundColor)
                term.setCursorPos(1, i + 3)
                if string.len((list[i + 15] and list[i + 15].label) and list[i + 15].label or "") > 11 then
                    write(list[i + 15] and string.sub(list[i + 15].label, 1, 11).."..." or "")
                else
                    write(list[i + 15] and list[i + 15].label or "")
                end
                term.setBackgroundColor(settings.gui.highlightBackgroundColor)
                term.setTextColor(settings.gui.highlightTextColor)
                term.setCursorPos(1, num - 12)
                if string.len(list[num].label) > 11 then
                    write(string.sub(list[num].label, 1, 11).."...")
                else
                    write(list[num].label)
                end
            else
                term.setTextColor(settings.gui.textColor)
                term.setBackgroundColor(settings.gui.backgroundColor)
                term.setCursorPos(1, i > 15 and (i - 12) or (i + 3))
                if string.len((list[i] and list[i].label) and list[i].label or "") > 11 then
                    write(list[i] and string.sub(list[i].label, 1, 11).."..." or "")
                else
                    write(list[i] and list[i].label or "")
                end
                term.setBackgroundColor(settings.gui.highlightBackgroundColor)
                term.setTextColor(settings.gui.highlightTextColor)
                term.setCursorPos(1, num + 3)
                if string.len(list[num].label) > 11 then
                    write(string.sub(list[num].label, 1, 11).."...")
                else
                    write(list[num].label)
                end
            end
        end
    end
end

function drawInfo(list, num, page)
    term.setCursorPos(17, 4)
    term.setTextColor(settings.gui.textColor)
    term.setBackgroundColor(settings.gui.backgroundColor)
    write("Peripheral network location: "..list[num] and list[num].name.."\n")
    write("Peripheral type: "..list[num] and list[num].label)
    -- Construct the page info
    -- When listing the methods, use string.gsub to iterate through and replace the commas with "\n"
    -- Each list item apart from the name and label should be a page of its own
    -- I can''t do any more with this until I can look up some docs again
    -- Menu bar should show "Commands" that can be clicked on in order to execute some of those peripheral commands. Would require use of pcall due to likely errors.
end

function drawScreen(list, num)
    -- Main GUI assembly
    clearScreen()
    drawMenuBar()
    drawList(list, num)
    drawInfo(list, num, page)
end
