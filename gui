-- Viewer GUI API
-- Used for drawing the GUI

function logfile(input)
    if not fs.exists("/logs") then
        fs.makeDir("/logs")
    else
        local file = fs.open("/logs/viewer.log", "a")
        file.write("[GUI]  "..input.."\n")
        file.close()
    end
end

function clearScreen()
    -- Clear the current screen, wiping for complete redraw
    gui.logfile("Unloading old settings in preparation for screen refresh...")
    os.unloadAPI("settings")
    os.loadAPI("settings")
    gui.logfile("Settings reloaded!")
    term.setBackgroundColor(settings.gui.backgroundColor)
    term.clear()
end

local function drawMenuBar()
    -- Draw main title/info bar
    local termX, termY = term.getSize()
    term.setCursorPos(1, settings.gui.menuLocation == "top" and termY or 1)
    term.setBackgroundColor(settings.gui.infoBarColor)
    term.setTextColor(settings.gui.infoTextColor)
    for i = 1, termX do
        term.setCursorPos(i, settings.gui.menuLocation == "top" and termY or 1)
        write(" ")
    end
    term.setCursorPos(1, settings.gui.menuLocation == "top" and termY or 1)
    write("Viewer v"..settings.main.version)
    -- Draw menu bar
    term.setCursorPos(1, settings.gui.menuLocation == "top" and 1 or termY)
    term.setBackgroundColor(settings.gui.menuBarColor)
    for i = 1, termX do
        term.setCursorPos(i, settings.gui.menuLocation == "top" and 1 or termY)
        write(" ")
    end
    term.setCursorPos(termX, 1)
    write("X")
end

function drawList(list, num)
    local termX, termY = term.getSize()
    for i = 3, termY - 1 do
        term.setTextColor(settings.gui.textColor)
        term.setBackgroundColor(settings.gui.backgroundColor)
        term.setCursorPos(1, i)
        write(string.rep(" ", 15))
    end
    term.setCursorPos(1, 2)
    term.setTextColor(settings.gui.textColor)
    term.setBackgroundColor(settings.gui.backgroundColor)
    write("Peripherals     Information")
    term.setTextColor(settings.gui.tuiColor)
    term.setCursorPos(15, 2)
    write("|")
    write(string.rep("-", 51))
    for i = 2, termY - 1 do 
        term.setCursorPos(15, i)
        if i == 2 then
            term.setBackgroundColor(settings.gui.backgroundColor)
            term.setTextColor(settings.gui.tuiColor)
            write("|")
        elseif i == 3 then
            term.setBackgroundColor(settings.gui.backgroundColor)
            term.setTextColor(settings.gui.tuiColor)
            write("+")
        elseif i == 4 then
            term.setBackgroundColor(settings.gui.scrollbarColor)
            term.setTextColor(settings.gui.scrollbarTextColor)
            write("^")
        elseif i == termY - 1 then
            term.setBackgroundColor(settings.gui.scrollbarColor)
            term.setTextColor(settings.gui.scrollbarTextColor)
            write("v")
        else
            term.setBackgroundColor(settings.gui.scrollbarColor)
            term.setTextColor(settings.gui.scrollbarTextColor)
            write("|")
        end
    end
    term.setBackgroundColor(settings.gui.menuBarColor)
    term.setTextColor(settings.gui.menuTextColor)
    term.setCursorPos(6, settings.gui.menuLocation == "top" and 1 or termY)
    write(string.rep(" ", 9))
    term.setCursorPos(1, settings.gui.menuLocation == "top" and 1 or termY)
    write("Page "..math.ceil(num / 15).."/"..math.ceil(#list / 15))
    for i = 1, 15 do
        if #list < 15 then
            term.setTextColor(settings.gui.textColor)
            term.setBackgroundColor(settings.gui.backgroundColor)
            term.setCursorPos(1, i + 3)
            if string.len((list[i] and list[i].label) and list[i].label or "") > 11 then
                write(list[i] and string.sub(list[i].label, 1, 11).."..." or "")
            else
                write(list[i] and list[i].label or "")
            end
            term.setBackgroundColor(settings.gui.highlightBackgroundColor)
            term.setTextColor(settings.gui.highlightTextColor)
            term.setCursorPos(1, num + 3)
            if string.len(list[num].label) > 11 then
                write(string.sub(list[num].label, 1, 11).."...")
            else
                write(list[num].label)
            end
         else
            if num > 15 then
                term.setTextColor(settings.gui.textColor)
                term.setBackgroundColor(settings.gui.backgroundColor)
                term.setCursorPos(1, i + 3)
                if string.len((list[i + 15] and list[i + 15].label) and list[i + 15].label or "") > 11 then
                    write(list[i + 15] and string.sub(list[i + 15].label, 1, 11).."..." or "")
                else
                    write(list[i + 15] and list[i + 15].label or "")
                end
                term.setBackgroundColor(settings.gui.highlightBackgroundColor)
                term.setTextColor(settings.gui.highlightTextColor)
                term.setCursorPos(1, num - 12)
                if string.len(list[num].label) > 11 then
                    write(string.sub(list[num].label, 1, 11).."...")
                else
                    write(list[num].label)
                end
            else
                term.setTextColor(settings.gui.textColor)
                term.setBackgroundColor(settings.gui.backgroundColor)
                term.setCursorPos(1, i > 15 and (i - 12) or (i + 3))
                if string.len((list[i] and list[i].label) and list[i].label or "") > 11 then
                    write(list[i] and string.sub(list[i].label, 1, 11).."..." or "")
                else
                    write(list[i] and list[i].label or "")
                end
                term.setBackgroundColor(settings.gui.highlightBackgroundColor)
                term.setTextColor(settings.gui.highlightTextColor)
                term.setCursorPos(1, num + 3)
                if string.len(list[num].label) > 11 then
                    write(string.sub(list[num].label, 1, 11).."...")
                else
                    write(list[num].label)
                end
            end
        end
    end
end

function drawInfo(list, num, page)
    local termX, termY = term.getSize()
    term.setCursorPos(17, settings.gui.menuLocation == "top" and 1 or termY)
    term.setBackgroundColor(settings.gui.menuBarColor)
    term.setTextColor(settings.gui.menuTextColor)
    write("Page: "..string.upper(string.sub(page, 1, 1))..string.sub(page, 2))
    term.setCursorPos(17, 4)
    term.setTextColor(settings.gui.textColor)
    term.setBackgroundColor(settings.gui.backgroundColor)
    if string.len(list[num].name) <= 24 then --24 max
        write("Location: "..list[num].name)
    else
        write("Location: "..string.sub(list[num].name, 1, 21).."...")
    end
    term.setCursorPos(17, 5)
    if alias[list[num].label] ~= nil and string.len(alias[list[num].label]) <= 28 then --28 max
        write("Type: "..alias[list[num].label])
    elseif string.len(list[num].label) <= 28 then
        write("Type: "..list[num].label)
    else
        write("Type: "..string.sub((alias[list[num].label] or list[num].label), 1, 25).."...")
    end
    if type(list[num][page]) == "table" then
        local pNum = 1
        for i, v in pairs(list[num][page]) do
            term.setCursorPos(17, 6 + pNum)
            local opt = string.upper(string.sub(i, 1, 1))..string.sub(i, 2)..": "
            write(string.gsub(opt, "_", " "))
            if type(v) == "table" then
                if string.len(i..": "..textutils.serialize(v)) <= 34 then -- 34 max
                    write(textutils.serialize(v))
                else
                    write("View data in new page")
                    -- Find some way to either view the data on this, or dump info to a file
                    -- Need to add a way to handle inventory data or additional nested tables
                end
            else
                if string.len(i..": "..v) <= 34 then -- 34 max
                    write(v)
                else
                    write("View data in new page")
                end
            end
            pNum = pNum + 1
        end
    else
        --write(type(list[num][page]))
    end
    -- Need to find a way to list the information per page
    -- A bit annoying to do this, considering how I construct the list table
    -- Construct the page info
    -- When listing the methods, use string.gsub to iterate through and replace the commas with "\n"
    -- Each list item apart from the name and label should be a page of its own
    -- Menu bar should show "Commands" that can be clicked on in order to execute some of those peripheral commands. Would require use of pcall due to likely errors.
end

function drawPopup(text)
    local termX, termY = term.getSize()
    -- Determine max text width
    local maxWidth = 1
    -- Determine height of the options
    local height = #text
    -- Determine width of options
    for _, v in ipairs(text) do
        local width = #v
        if width > maxWidth then
            maxWidth = width
        end
    end
    -- Determine placement of box bounds
    local startX = ((termX / 2) - (maxWidth / 2))
    local endX = (termX / 2) + (maxWidth / 2) + 1
    local startY = math.floor(((termY / 2) - (height / 2)) - 1)
    local endY = math.floor((termY / 2) + (height / 2))
    -- Change text/background color
    for i = startX, endX do
        for v = startY, endY do
            -- Draw box
            term.setBackgroundColor(v == startY and settings.gui.popupTitleBackground or settings.gui.popupBackground)
            term.setCursorPos(i, v)
            write(" ")
        end
    end
    term.setCursorPos(endX, startY)
    term.setTextColor(settings.gui.popupTitleText)
    term.setBackgroundColor(settings.gui.popupTitleBackground)
    write("X")
    for i = 1, #text do
        -- Write options
        local textStart = (termX / 2) - (#text[i] / 2) + 1
        term.setCursorPos(textStart, i == 1 and startY or (startY + i))
        term.setBackgroundColor(i == 1 and settings.gui.popupTitleBackground or settings.gui.popupBackground)
        term.setTextColor(i == 1 and settings.gui.popupTitleText or settings.gui.popupText)
        write(text[i])
    end
    while true do
        local events = {os.pullEvent()}
        if events[1] == "mouse_click" and events[2] == 1 then
            if events[3] == endX and events[4] == startY then
                -- Close popup window
                break
            end
            for i = 1, #text do
                local textStart = (termX / 2) - (#text[i] / 2) + 1
                local textEnd = textStart + #text[i]
                if events[3] >= textStart and events[4] <= textEnd then
                    -- Select option
                    opt = text[i + 2]
                    break
                end
            end
        else
            -- Repeat until option selected
        end
    end
    return opt
end

function drawScreen(list, num, page)
    -- Main GUI assembly
    clearScreen()
    drawMenuBar()
    drawList(list, num)
    drawInfo(list, num, page)
end